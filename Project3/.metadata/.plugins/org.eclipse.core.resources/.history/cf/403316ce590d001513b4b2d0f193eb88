import java.util.Stack;


public class Postfix {
	public static void main(String []args)
	{
		String [] exp = {"(","3", "+", "2",")", "*", "value1", "*", "value3"};
		String [] postfix = InfixExpression.convertToPostfix(exp);
		
		String [] variables = {"value1", "value2", "value3"};
		String [] values = {"1.09", "2", "3.5"};
		
		
		System.out.println("Postfix evaluation: " +evalPostfix(postfix, variables, values));
		String expression = "2/(2+3)*2+2";
		String []exp1 = new String[expression.length()];
		for(int i =0; i < expression.length(); i++)
		{
			exp[i] = Character.toString(expression.charAt(i));
			System.out.print(exp[i]);
		}
		String [] postFix = InfixExpression.convertToPostfix(exp1);
		String []preFix = InfixExpression.convertToPrefix(exp1);
		System.out.print("Postfix: ");
		for(int i = 0; i < postFix.length; i++)
		{
			System.out.print(postFix[i]);
		}
		System.out.print("\n");
		System.out.print("prefix: ");
		for(int i = 0; i < preFix.length; i++)
		{
			System.out.print(preFix[i]);
		}
		
			
	}
	
	public static Double evalPostfix(String [] postfix, String[] variables, String []values)
	{
		Stack <Double> nums = new Stack<>();
		Double result = 0.0;
		for(int i = 0; i < postfix.length; i++)
		{
			
			Double val = getValue(postfix[i], variables, values);
			if(postfix[i].equals("+"))
			{
				Double rhs = nums.pop();
				Double lhs = nums.pop();
				nums.push(lhs + rhs);
			}
			else if(postfix[i].equals("-"))
			{
				Double rhs = nums.pop();
				Double lhs = nums.pop();
				nums.push(lhs - rhs);
			}
			else if (postfix[i].equals("*"))
			{
				Double rhs = nums.pop();
				Double lhs = nums.pop();
				nums.push(lhs * rhs);
			}
			else if (postfix[i].equals("/"))
			{
				Double rhs = nums.pop();
				Double lhs = nums.pop();
				nums.push(lhs/rhs);
			}
			
			else if(Character.isDigit(postfix[i].charAt(0)))
			{
				nums.push(Double.parseDouble(postfix[i]));
			}
			else
			{
				if(val == null)
					throw new IllegalArgumentException("Error variable not found");
				else
				{
					nums.push(val);
				}
					
			}
				
		}
		result = nums.pop();
		if(!nums.isEmpty())
			throw new IllegalArgumentException("Error expression is invalid");
		return result;
	}
	public static Double getValue(String varName, String [] variables, String [] values)
	{	
		for (int i = 0; i < variables.length; i++)
		{
			if(variables[i].equals(varName))
				return Double.parseDouble(values[i]);
		}
		
		return null;
	}


}
